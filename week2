SOLIDITY DEEP DIVE
constructors-
constructor() <Access Modifier> {          
} 
Itâ€™s an optional function which initializes state variables of the contract. A constructor can be either internal or public, an internal constructor marks contract as abstract. 
is called once the contract is created


//SPDX-License-Identifier:UNLICENSED
pragma solidity ^0.8.13;


import "filename";
/*
used for longer comments
*/
contract HelloWorld{
    
}

//SPDX-License-Identifier:UNLICENSED

pragma solidity ^0.8.4;
 
contract ReadWrite {


   uint num;//default value is zero

   function get() public view returns(uint){
       //reading a variable from blockchaim
       return num;
   }

   function set(uint _num) public{//taking a value as argument for num
       //writing a variable
       num =_num;
       //override the existinfg value with new value
       //state of the variable gets updated on chain

   }


}



8/05/22
Reading and writing a state variable
1)solidity is a statically ttyped language(matlab every variable will have an associated type with it during compilation time)
2)the concept of undefined or null doesnt exist in solidity

3)default value of boolean- false
address-0x0
int/uint -0
4)int can of base sie from 8 to 256
5)address holds a 20 bye value-address are of two types payable and non payable
6)enums/struct -user defined data type
7)struct is similar to clases s
8)bytes data type -used to holds sequence of bytes and used to store string
9)address payable a-this makes the variable a payable
10)we can make a non-payable add toa payable one one by involving typecastingg
11)what is the default specifier for solidity?-Internal***********
12)signed intergers- can hold *negative* value


13)declaring a variable 
address public addr =0x243873019470937401c

14)fixed size byte array=byte1,byte2,byte3.....byte32---
so here byte1 -will hold a sequence of one byte




*CONSTANTSS IN SOLIDITY*
EX- address public constant MY_ADD=0x893648930401347
thiss address will remain constant throughout the contract

*ether and wei
uint public onewei= 1 wei
uint public oneether= 1 ether;
1 ether is equal to 10^18 wei
1 gwei =10^9 wei



11/05/22


//SPDX-License-Identifier: MIT
pragma solidity ^0.8.3;
//Arrays-dynamic(we can change the size) or fixed size
//initialization
//inser(push),get,update,delete,pop,length
//creating array in memory
//returning array from function
contract Array{
    uint[] public nums=[1,2,3];
    uint[3] public numsFixed=[4,5,6];

    function examples() external{
        nums.push(4);//[1,2,3,4]
        uint x=nums[1];// i.e 2
        nums[2]=777;//to update an array[1,2,777,4]
        delete nums[1];//here the elemet in index position 1 will be replaced by 0 
        //so total no. of elements in an array remain same[1,0,777,4]
        nums.pop();//[1,0,777]
        //**************create in memory*************
        uint[] memory a = new uint[](5);
        a[1]=123;//the array on memory avn only be updated  or get the value but we cannot use pop(),delete
        function returnArray() external view returns (uint[] memory){
            return nums;
        }
        
    }
}

